# Copyright (c) 2022, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-initdb-scripts-configmap
  namespace: {{ .Release.Namespace }}
data:
  setup1.sql: |
    DROP DATABASE IF EXISTS "WSO2AM_DB";
    CREATE DATABASE "WSO2AM_DB";
    CREATE USER wso2carbon WITH PASSWORD 'wso2carbon';
    GRANT ALL PRIVILEGES ON DATABASE "WSO2AM_DB" TO wso2carbon;
    \c "WSO2AM_DB"
        BEGIN TRANSACTION;
        CREATE SEQUENCE AM_SUBSCRIBER_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_SUBSCRIBER
        (
        SUBSCRIBER_ID INTEGER DEFAULT nextval
        ('am_subscriber_sequence'),
        USER_ID VARCHAR
        (255) NOT NULL,
        ORGANIZATION VARCHAR
        (100) NOT NULL,
        EMAIL_ADDRESS VARCHAR
        (256) NULL,
        DATE_SUBSCRIBED TIMESTAMP NOT NULL,
        CREATED_BY VARCHAR
        (100),
        CREATED_TIME TIMESTAMP,
        UPDATED_BY VARCHAR
        (100),
        UPDATED_TIME TIMESTAMP,
        PRIMARY KEY
        (SUBSCRIBER_ID),
        UNIQUE
        (ORGANIZATION,USER_ID)
        )
        ;

        CREATE SEQUENCE AM_APPLICATION_SEQUENCE START WITH 1 INCREMENT BY 1 ;
        CREATE TABLE
        IF NOT EXISTS AM_APPLICATION
        (
        APPLICATION_ID INTEGER DEFAULT nextval
        ('am_application_sequence'),
        NAME VARCHAR
        (100),
        SUBSCRIBER_ID INTEGER,
        APPLICATION_TIER VARCHAR
        (50) DEFAULT 'Unlimited',
        CALLBACK_URL VARCHAR
        (512),
        DESCRIPTION VARCHAR
        (512),
        APPLICATION_STATUS VARCHAR
        (50) DEFAULT 'APPROVED',
        GROUP_ID VARCHAR
        (100),
        CREATED_BY VARCHAR
        (100),
        CREATED_TIME TIMESTAMP,
        UPDATED_BY VARCHAR
        (100),
        UPDATED_TIME TIMESTAMP,
        UUID VARCHAR
        (256),
        TOKEN_TYPE VARCHAR
        (10),
        ORGANIZATION VARCHAR
        (100),
        FOREIGN KEY
        (SUBSCRIBER_ID) REFERENCES AM_SUBSCRIBER
        (SUBSCRIBER_ID) ON
        UPDATE CASCADE ON
        DELETE RESTRICT,
        PRIMARY KEY(APPLICATION_ID)
        ,
        UNIQUE
        (NAME,SUBSCRIBER_ID,ORGANIZATION),
        UNIQUE
        (UUID)
        );

        CREATE TABLE
        IF NOT EXISTS AM_MONETIZATION_USAGE
        (
                ID VARCHAR
        (100) NOT NULL,
                STATE VARCHAR
        (50) NOT NULL,
                STATUS VARCHAR
        (50) NOT NULL,
                STARTED_TIME VARCHAR
        (50) NOT NULL,
                PUBLISHED_TIME VARCHAR
        (50) NOT NULL,
                PRIMARY KEY
        (ID)
        );

        CREATE SEQUENCE AM_API_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_API
        (
        API_ID INTEGER DEFAULT nextval
        ('am_api_sequence'),
        API_UUID VARCHAR
        (256),
        API_PROVIDER VARCHAR
        (256),
        API_NAME VARCHAR
        (256),
        API_VERSION VARCHAR
        (30),
        CONTEXT VARCHAR
        (256),
        CONTEXT_TEMPLATE VARCHAR
        (256),
        API_TIER VARCHAR
        (256),
        API_TYPE VARCHAR
        (10),
        ORGANIZATION VARCHAR
        (100),
        GATEWAY_VENDOR VARCHAR
        (100) DEFAULT 'wso2',
        CREATED_BY VARCHAR
        (100),
        CREATED_TIME TIMESTAMP,
        UPDATED_BY VARCHAR
        (100),
        UPDATED_TIME TIMESTAMP,
        STATUS VARCHAR
        (30),
        VERSION_COMPARABLE VARCHAR
        (15),
        LOG_LEVEL VARCHAR
        (255) DEFAULT 'OFF',
        REVISIONS_CREATED INTEGER DEFAULT 0,
        ARTIFACT JSONB NOT NULL,
        PRIMARY KEY
        (API_ID),
        UNIQUE
        (API_PROVIDER,API_NAME,API_VERSION,ORGANIZATION),
        UNIQUE
        (API_UUID)
        );

        CREATE TABLE AM_API_ARTIFACT
        (
        ORGANIZATION VARCHAR(100) NOT NULL,
        API_UUID VARCHAR(100) NOT NULL,
        API_DEFINITION BYTEA,
        MEDIA_TYPE VARCHAR(100)
        );

        CREATE SEQUENCE AM_RESOURCE_CATEGORIES_seq;

        CREATE TABLE AM_RESOURCE_CATEGORIES
        (
        RESOURCE_CATEGORY_ID INTEGER DEFAULT NEXTVAL ('AM_RESOURCE_CATEGORIES_seq'),
        RESOURCE_CATEGORY VARCHAR(255),
        PRIMARY KEY (RESOURCE_CATEGORY_ID),
        UNIQUE (RESOURCE_CATEGORY)
        );

        CREATE TABLE AM_API_RESOURCES
        (
        UUID VARCHAR(255),
        API_ID VARCHAR(255),
        RESOURCE_CATEGORY_ID INTEGER,
        DATA_TYPE VARCHAR(255),
        RESOURCE_CONTENT TSVECTOR,
        RESOURCE_BINARY_VALUE BYTEA,
        CREATED_BY VARCHAR(100),
        CREATED_TIME TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP
        (6),
        UPDATED_BY VARCHAR
        (100),
        LAST_UPDATED_TIME TIMESTAMP
        (6) DEFAULT CURRENT_TIMESTAMP
        (6),
        PRIMARY KEY
        (UUID),
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_UUID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        FOREIGN KEY (RESOURCE_CATEGORY_ID)
        REFERENCES AM_RESOURCE_CATEGORIES
        (RESOURCE_CATEGORY_ID)
        );

        CREATE TABLE AM_API_DOC_META_DATA
        (
        UUID VARCHAR(255),
        RESOURCE_UUID VARCHAR(255),
        NAME VARCHAR(255),
        SUMMARY VARCHAR(1024),
        TYPE VARCHAR(255),
        OTHER_TYPE_NAME VARCHAR(255),
        SOURCE_URL VARCHAR(255),
        FILE_NAME VARCHAR(255),
        SOURCE_TYPE VARCHAR(255),
        VISIBILITY VARCHAR(30),
        CREATED_BY VARCHAR(100),
        CREATED_TIME TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP
        (6),
        UPDATED_BY VARCHAR
        (100),
        LAST_UPDATED_TIME TIMESTAMP
        (6) DEFAULT CURRENT_TIMESTAMP
        (6),
        PRIMARY KEY
        (UUID),
        FOREIGN KEY
        (RESOURCE_UUID) REFERENCES AM_API_RESOURCES
        (UUID) ON
        UPDATE CASCADE ON
        DELETE CASCADE
        );

        CREATE TABLE
        IF NOT EXISTS AM_GRAPHQL_COMPLEXITY
        (
        UUID VARCHAR
        (256),
        API_ID INTEGER NOT NULL,
        TYPE VARCHAR
        (256),
        FIELD VARCHAR
        (256),
        COMPLEXITY_VALUE INTEGER,
        REVISION_UUID VARCHAR
        (255),
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        PRIMARY KEY(UUID)
        );

        CREATE SEQUENCE AM_API_URL_MAPPING_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_API_URL_MAPPING
        (
        URL_MAPPING_ID INTEGER DEFAULT nextval
        ('am_api_url_mapping_sequence'),
        API_ID INTEGER NOT NULL,
        HTTP_METHOD VARCHAR
        (20) NULL,
        AUTH_SCHEME VARCHAR
        (50) NULL,
        URL_PATTERN VARCHAR
        (512) NULL,
        THROTTLING_TIER varchar
        (512) DEFAULT NULL,
        MEDIATION_SCRIPT BYTEA,
        REVISION_UUID VARCHAR
        (255),
        PRIMARY KEY
        (URL_MAPPING_ID)
        );

        CREATE TABLE
        IF NOT EXISTS AM_API_RESOURCE_SCOPE_MAPPING
        (
        SCOPE_NAME VARCHAR
        (256) NOT NULL,
        URL_MAPPING_ID INTEGER NOT NULL,
        TENANT_ID INTEGER NOT NULL,
        FOREIGN KEY
        (URL_MAPPING_ID) REFERENCES AM_API_URL_MAPPING
        (URL_MAPPING_ID) ON
        DELETE CASCADE,
        PRIMARY KEY(SCOPE_NAME, URL_MAPPING_ID)
        );

        CREATE TABLE
        IF NOT EXISTS AM_SECURITY_AUDIT_UUID_MAPPING
        (
        API_ID INTEGER NOT NULL,
        AUDIT_UUID VARCHAR
        (255) NOT NULL,
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        PRIMARY KEY (API_ID)
        );

        CREATE SEQUENCE AM_API_PRODUCT_MAPPING_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_API_PRODUCT_MAPPING
        (
                API_PRODUCT_MAPPING_ID INTEGER DEFAULT nextval
        ('am_api_product_mapping_sequence'),
                API_ID INTEGER,
                URL_MAPPING_ID INTEGER,
                REVISION_UUID VARCHAR
        (255),
                FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        DELETE CASCADE,
                FOREIGN KEY (URL_MAPPING_ID)
        REFERENCES AM_API_URL_MAPPING
        (URL_MAPPING_ID) ON
        DELETE CASCADE,
                PRIMARY KEY(API_PRODUCT_MAPPING_ID)
        );

        CREATE SEQUENCE AM_SUBSCRIPTION_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_SUBSCRIPTION
        (
        SUBSCRIPTION_ID INTEGER DEFAULT nextval
        ('am_subscription_sequence'),
        TIER_ID VARCHAR
        (50),
        TIER_ID_PENDING VARCHAR
        (50),
        API_ID INTEGER,
        LAST_ACCESSED TIMESTAMP NULL,
        APPLICATION_ID INTEGER,
        SUB_STATUS VARCHAR
        (50),
        SUBS_CREATE_STATE VARCHAR
        (50) DEFAULT 'SUBSCRIBE',
        CREATED_BY VARCHAR
        (100),
        CREATED_TIME TIMESTAMP,
        UPDATED_BY VARCHAR
        (100),
        UPDATED_TIME TIMESTAMP,
        UUID VARCHAR
        (256),
        FOREIGN KEY
        (APPLICATION_ID) REFERENCES AM_APPLICATION
        (APPLICATION_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        FOREIGN KEY(API_ID)
        REFERENCES AM_API
        (API_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        PRIMARY KEY (SUBSCRIPTION_ID)
        ,
        UNIQUE
        (UUID)
        )
        ;

        CREATE TABLE AM_APPLICATION_KEY_MAPPING
        (
        UUID VARCHAR(100),
        APPLICATION_ID INTEGER,
        CONSUMER_KEY VARCHAR(512),
        KEY_TYPE VARCHAR(512) NOT NULL,
        STATE VARCHAR(30),
        CREATE_MODE VARCHAR(30) DEFAULT 'CREATED',
        APP_INFO BYTEA DEFAULT NULL,
        KEY_MANAGER VARCHAR(100),
        FOREIGN KEY(APPLICATION_ID) REFERENCES AM_APPLICATION(APPLICATION_ID) ON UPDATE CASCADE ON DELETE CASCADE,
        PRIMARY KEY(APPLICATION_ID,KEY_TYPE,KEY_MANAGER)
        )
        ;

        CREATE SEQUENCE AM_APPLICATION_REGISTRATION_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_APPLICATION_REGISTRATION
        (
        REG_ID INTEGER DEFAULT nextval
        ('am_application_registration_sequence'),
        SUBSCRIBER_ID INT,
        WF_REF VARCHAR
        (255) NOT NULL,
        APP_ID INT,
        TOKEN_TYPE VARCHAR
        (30),
        TOKEN_SCOPE VARCHAR
        (1500) DEFAULT 'default',
        INPUTS VARCHAR
        (1000),
        ALLOWED_DOMAINS VARCHAR
        (256),
        VALIDITY_PERIOD BIGINT,
        KEY_MANAGER VARCHAR
        (255) NOT NULL,
        UNIQUE
        (SUBSCRIBER_ID,APP_ID,TOKEN_TYPE,KEY_MANAGER),
        FOREIGN KEY
        (SUBSCRIBER_ID) REFERENCES AM_SUBSCRIBER
        (SUBSCRIBER_ID) ON
        UPDATE CASCADE ON
        DELETE RESTRICT,
        FOREIGN KEY(APP_ID)
        REFERENCES AM_APPLICATION
        (APPLICATION_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        PRIMARY KEY (REG_ID)
        )
        ;



        CREATE SEQUENCE AM_API_LC_EVENT_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_API_LC_EVENT
        (
        EVENT_ID INTEGER DEFAULT nextval
        ('am_api_lc_event_sequence'),
        API_ID INTEGER NOT NULL,
        PREVIOUS_STATE VARCHAR
        (50),
        NEW_STATE VARCHAR
        (50) NOT NULL,
        USER_ID VARCHAR
        (50) NOT NULL,
        TENANT_ID INTEGER NOT NULL,
        EVENT_DATE TIMESTAMP NOT NULL,
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        PRIMARY KEY (EVENT_ID)
        )
        ;

        CREATE TABLE
        IF NOT EXISTS AM_APP_KEY_DOMAIN_MAPPING
        (
        CONSUMER_KEY VARCHAR
        (255),
        AUTHZ_DOMAIN VARCHAR
        (255) DEFAULT 'ALL',
        PRIMARY KEY
        (CONSUMER_KEY,AUTHZ_DOMAIN)
        )
        ;

        CREATE TABLE
        IF NOT EXISTS AM_API_COMMENTS
        (
        COMMENT_ID VARCHAR
        (64) NOT NULL,
        COMMENT_TEXT VARCHAR
        (512),
        CREATED_BY VARCHAR
        (255),
        CREATED_TIME TIMESTAMP NOT NULL,
        UPDATED_TIME TIMESTAMP,
        API_ID INTEGER,
        PARENT_COMMENT_ID VARCHAR
        (64) DEFAULT NULL,
        ENTRY_POINT VARCHAR
        (20),
        CATEGORY VARCHAR
        (20) DEFAULT 'general',
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        DELETE CASCADE,
        FOREIGN KEY(PARENT_COMMENT_ID)
        REFERENCES AM_API_COMMENTS
        (COMMENT_ID),
        PRIMARY KEY
        (COMMENT_ID)
        )
        ;

        CREATE SEQUENCE AM_WORKFLOWS_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_WORKFLOWS
        (
        WF_ID INTEGER DEFAULT nextval
        ('am_workflows_sequence'),
        WF_REFERENCE VARCHAR
        (255) NOT NULL,
        WF_TYPE VARCHAR
        (255) NOT NULL,
        WF_STATUS VARCHAR
        (255) NOT NULL,
        WF_CREATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        WF_UPDATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP ,
        WF_STATUS_DESC VARCHAR
        (1000),
        TENANT_ID INTEGER,
        TENANT_DOMAIN VARCHAR
        (255),
        WF_EXTERNAL_REFERENCE VARCHAR
        (255) NOT NULL,
        WF_METADATA BYTEA DEFAULT NULL,
        WF_PROPERTIES BYTEA DEFAULT NULL,
        PRIMARY KEY
        (WF_ID),
        UNIQUE
        (WF_EXTERNAL_REFERENCE)
        )
        ;

        CREATE SEQUENCE AM_API_RATINGS_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_API_RATINGS
        (
        RATING_ID VARCHAR
        (255) NOT NULL,
        API_ID INTEGER,
        RATING INTEGER,
        SUBSCRIBER_ID INTEGER,
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
        FOREIGN KEY(SUBSCRIBER_ID)
        REFERENCES AM_SUBSCRIBER
        (SUBSCRIBER_ID) ON
        UPDATE CASCADE ON
        DELETE RESTRICT,
        PRIMARY KEY (RATING_ID)
        )
        ;

        CREATE SEQUENCE AM_TIER_PERMISSIONS_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_TIER_PERMISSIONS
        (
        TIER_PERMISSIONS_ID INTEGER DEFAULT nextval
        ('am_tier_permissions_sequence'),
        TIER VARCHAR
        (50) NOT NULL,
        PERMISSIONS_TYPE VARCHAR
        (50) NOT NULL,
        ROLES VARCHAR
        (512) NOT NULL,
        ORGANIZATION VARCHAR
        (100) NOT NULL,
        PRIMARY KEY
        (TIER_PERMISSIONS_ID)
        );

        CREATE SEQUENCE AM_EXTERNAL_STORES_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_EXTERNAL_STORES
        (
        APISTORE_ID INTEGER DEFAULT nextval
        ('am_external_stores_sequence'),
        API_ID INTEGER,
        STORE_ID VARCHAR
        (255) NOT NULL,
        STORE_DISPLAY_NAME VARCHAR
        (255) NOT NULL,
        STORE_ENDPOINT VARCHAR
        (255) NOT NULL,
        STORE_TYPE VARCHAR
        (255) NOT NULL,
        LAST_UPDATED_TIME TIMESTAMP,
        FOREIGN KEY
        (API_ID) REFERENCES AM_API
        (API_ID) ON
        UPDATE CASCADE ON
        DELETE RESTRICT,
        PRIMARY KEY (APISTORE_ID)
        )
        ;

        CREATE TABLE
        IF NOT EXISTS AM_SHARED_SCOPE
        (
        NAME VARCHAR
        (255),
        UUID VARCHAR
        (256),
        TENANT_ID INTEGER,
        PRIMARY KEY
        (UUID)
        );

        CREATE SEQUENCE AM_API_DEFAULT_VERSION_PK_SEQ;
        CREATE TABLE
        IF NOT EXISTS AM_API_DEFAULT_VERSION
        (
                DEFAULT_VERSION_ID INTEGER DEFAULT NEXTVAL
        ('am_api_default_version_pk_seq'),
                API_NAME VARCHAR
        (256) NOT NULL ,
                API_PROVIDER VARCHAR
        (256) NOT NULL ,
                DEFAULT_API_VERSION VARCHAR
        (30) ,
                PUBLISHED_DEFAULT_API_VERSION VARCHAR
        (30) ,
                ORGANIZATION VARCHAR
        (100) ,
                PRIMARY KEY
        (DEFAULT_VERSION_ID)
        );


        CREATE INDEX IDX_SUB_APP_ID ON AM_SUBSCRIPTION (APPLICATION_ID, SUBSCRIPTION_ID)
        ;



        -- AM Throttling tables --
        CREATE SEQUENCE AM_POLICY_SUBSCRIPTION_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_POLICY_SUBSCRIPTION
        (
                POLICY_ID INTEGER DEFAULT NEXTVAL
        ('AM_POLICY_SUBSCRIPTION_SEQ'),
                NAME VARCHAR
        (512) NOT NULL,
                DISPLAY_NAME VARCHAR
        (512) NULL DEFAULT NULL,
                ORGANIZATION VARCHAR
        (100) NOT NULL,
                DESCRIPTION VARCHAR
        (1024) NULL DEFAULT NULL,
                QUOTA_TYPE VARCHAR
        (25) NOT NULL,
                QUOTA INTEGER NOT NULL,
                QUOTA_UNIT VARCHAR
        (10) NULL,
                UNIT_TIME INTEGER NOT NULL,
                TIME_UNIT VARCHAR
        (25) NOT NULL,
                RATE_LIMIT_COUNT INTEGER NULL DEFAULT NULL,
                RATE_LIMIT_TIME_UNIT VARCHAR
        (25) NULL DEFAULT NULL,
                IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
                                CUSTOM_ATTRIBUTES BYTEA DEFAULT NULL,
                STOP_ON_QUOTA_REACH BOOLEAN NOT NULL DEFAULT '0',
                BILLING_PLAN VARCHAR
        (20) NOT NULL,
                UUID VARCHAR
        (256),
                MONETIZATION_PLAN VARCHAR
        (25) NULL DEFAULT NULL,
                FIXED_RATE VARCHAR
        (15) NULL DEFAULT NULL,
                BILLING_CYCLE VARCHAR
        (15) NULL DEFAULT NULL,
                PRICE_PER_REQUEST VARCHAR
        (15) NULL DEFAULT NULL,
                CURRENCY VARCHAR
        (15) NULL DEFAULT NULL,
                MAX_COMPLEXITY INTEGER NOT NULL DEFAULT 0,
                MAX_DEPTH INTEGER NOT NULL DEFAULT 0,
                CONNECTIONS_COUNT INTEGER NOT NULL DEFAULT 0,
                PRIMARY KEY
        (POLICY_ID),
                UNIQUE
        (NAME, ORGANIZATION),
                UNIQUE
        (UUID)
        );

        CREATE SEQUENCE AM_POLICY_APPLICATION_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_POLICY_APPLICATION
        (
                POLICY_ID INTEGER DEFAULT NEXTVAL
        ('AM_POLICY_APPLICATION_SEQ'),
                NAME VARCHAR
        (512) NOT NULL,
                DISPLAY_NAME VARCHAR
        (512) NULL DEFAULT NULL,
                ORGANIZATION VARCHAR
        (100) NOT NULL,
                DESCRIPTION VARCHAR
        (1024) NULL DEFAULT NULL,
                QUOTA_TYPE VARCHAR
        (25) NOT NULL,
                QUOTA INTEGER NOT NULL,
                QUOTA_UNIT VARCHAR
        (10) NULL DEFAULT NULL,
                UNIT_TIME INTEGER NOT NULL,
                TIME_UNIT VARCHAR
        (25) NOT NULL,
                IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
                                CUSTOM_ATTRIBUTES BYTEA DEFAULT NULL,
                                UUID VARCHAR
        (256),
                PRIMARY KEY
        (POLICY_ID),
                UNIQUE
        (NAME, ORGANIZATION),
                UNIQUE
        (UUID)
        );

        CREATE SEQUENCE AM_POLICY_HARD_THROTTLING_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_POLICY_HARD_THROTTLING
        (
                POLICY_ID INTEGER DEFAULT NEXTVAL
        ('AM_POLICY_HARD_THROTTLING_SEQ'),
                NAME VARCHAR
        (512) NOT NULL,
                TENANT_ID INTEGER NOT NULL,
                DESCRIPTION VARCHAR
        (1024) NULL DEFAULT NULL,
                QUOTA_TYPE VARCHAR
        (25) NOT NULL,
                QUOTA INTEGER NOT NULL,
                QUOTA_UNIT VARCHAR
        (10) NULL DEFAULT NULL,
                UNIT_TIME INTEGER NOT NULL,
                TIME_UNIT VARCHAR
        (25) NOT NULL,
                IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
                PRIMARY KEY
        (POLICY_ID),
                UNIQUE
        (NAME, TENANT_ID)
        );

        CREATE SEQUENCE AM_API_THROTTLE_POLICY_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_API_THROTTLE_POLICY
        (
                POLICY_ID INTEGER DEFAULT NEXTVAL
        ('AM_API_THROTTLE_POLICY_SEQ'),
                NAME VARCHAR
        (512) NOT NULL,
                DISPLAY_NAME VARCHAR
        (512) NULL DEFAULT NULL,
                ORGANIZATION VARCHAR
        (100) NOT NULL,
                DESCRIPTION VARCHAR
        (1024),
                DEFAULT_QUOTA_TYPE VARCHAR
        (25) NOT NULL,
                DEFAULT_QUOTA INTEGER NOT NULL,
                DEFAULT_QUOTA_UNIT VARCHAR
        (10) NULL,
                DEFAULT_UNIT_TIME INTEGER NOT NULL,
                DEFAULT_TIME_UNIT VARCHAR
        (25) NOT NULL,
                APPLICABLE_LEVEL VARCHAR
        (25) NOT NULL,
                IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
                UUID VARCHAR
        (256),
                PRIMARY KEY
        (POLICY_ID),
                UNIQUE
        (NAME, ORGANIZATION),
                UNIQUE
        (UUID)
        );

        CREATE SEQUENCE AM_CONDITION_GROUP_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_CONDITION_GROUP
        (
                CONDITION_GROUP_ID INTEGER DEFAULT NEXTVAL
        ('AM_CONDITION_GROUP_SEQ'),
                POLICY_ID INTEGER NOT NULL,
                QUOTA_TYPE VARCHAR
        (25),
                QUOTA INTEGER NOT NULL,
                QUOTA_UNIT VARCHAR
        (10) NULL DEFAULT NULL,
                UNIT_TIME INTEGER NOT NULL,
                TIME_UNIT VARCHAR
        (25) NOT NULL,
                DESCRIPTION VARCHAR
        (1024) NULL DEFAULT NULL,
                PRIMARY KEY
        (CONDITION_GROUP_ID),
                FOREIGN KEY
        (POLICY_ID) REFERENCES AM_API_THROTTLE_POLICY
        (POLICY_ID) ON
        DELETE CASCADE ON
        UPDATE CASCADE
        );

        CREATE SEQUENCE AM_QUERY_PARAMETER_CONDITION_SEQ START
        WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_QUERY_PARAMETER_CONDITION
        (
                QUERY_PARAMETER_ID INTEGER DEFAULT NEXTVAL
        ('AM_QUERY_PARAMETER_CONDITION_SEQ'),
                CONDITION_GROUP_ID INTEGER NOT NULL,
                PARAMETER_NAME VARCHAR
        (255) DEFAULT NULL,
                PARAMETER_VALUE VARCHAR
        (255) DEFAULT NULL,
                        IS_PARAM_MAPPING BOOLEAN DEFAULT '1',
                PRIMARY KEY
        (QUERY_PARAMETER_ID),
                FOREIGN KEY
        (CONDITION_GROUP_ID) REFERENCES AM_CONDITION_GROUP
        (CONDITION_GROUP_ID) ON
        DELETE CASCADE ON
        UPDATE CASCADE
        );

        CREATE SEQUENCE AM_HEADER_FIELD_CONDITION_SEQ START
        WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_HEADER_FIELD_CONDITION
        (
                HEADER_FIELD_ID INTEGER DEFAULT NEXTVAL
        ('AM_HEADER_FIELD_CONDITION_SEQ'),
                CONDITION_GROUP_ID INTEGER NOT NULL,
                HEADER_FIELD_NAME VARCHAR
        (255) DEFAULT NULL,
                HEADER_FIELD_VALUE VARCHAR
        (255) DEFAULT NULL,
                        IS_HEADER_FIELD_MAPPING BOOLEAN DEFAULT '1',
                PRIMARY KEY
        (HEADER_FIELD_ID),
                FOREIGN KEY
        (CONDITION_GROUP_ID) REFERENCES AM_CONDITION_GROUP
        (CONDITION_GROUP_ID) ON
        DELETE CASCADE ON
        UPDATE CASCADE
        );

        CREATE SEQUENCE AM_JWT_CLAIM_CONDITION_SEQ START
        WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_JWT_CLAIM_CONDITION
        (
                JWT_CLAIM_ID INTEGER DEFAULT NEXTVAL
        ('AM_JWT_CLAIM_CONDITION_SEQ'),
                CONDITION_GROUP_ID INTEGER NOT NULL,
                CLAIM_URI VARCHAR
        (512) DEFAULT NULL,
                CLAIM_ATTRIB VARCHAR
        (1024) DEFAULT NULL,
                IS_CLAIM_MAPPING BOOLEAN DEFAULT '1',
                PRIMARY KEY
        (JWT_CLAIM_ID),
                FOREIGN KEY
        (CONDITION_GROUP_ID) REFERENCES AM_CONDITION_GROUP
        (CONDITION_GROUP_ID) ON
        DELETE CASCADE ON
        UPDATE CASCADE
        );

        CREATE SEQUENCE AM_IP_CONDITION_SEQ START
        WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_IP_CONDITION
        (
        AM_IP_CONDITION_ID INTEGER DEFAULT NEXTVAL
        ('AM_IP_CONDITION_SEQ'),
        STARTING_IP VARCHAR
        (45) NULL,
        ENDING_IP VARCHAR
        (45) NULL,
        SPECIFIC_IP VARCHAR
        (45) NULL,
        WITHIN_IP_RANGE BOOLEAN DEFAULT '1',
        CONDITION_GROUP_ID INT NULL,
        PRIMARY KEY
        (AM_IP_CONDITION_ID),
        FOREIGN KEY
        (CONDITION_GROUP_ID)
        REFERENCES AM_CONDITION_GROUP
        (CONDITION_GROUP_ID)   ON
        DELETE CASCADE ON
        UPDATE CASCADE);

        CREATE SEQUENCE AM_POLICY_GLOBAL_SEQ START
        WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_POLICY_GLOBAL
        (
                POLICY_ID INTEGER DEFAULT NEXTVAL
        ('AM_POLICY_GLOBAL_SEQ'),
                NAME VARCHAR
        (512) NOT NULL,
                KEY_TEMPLATE VARCHAR
        (512) NOT NULL,
                ORGANIZATION VARCHAR
        (100) NOT NULL,
                DESCRIPTION VARCHAR
        (1024) NULL DEFAULT NULL,
                SIDDHI_QUERY BYTEA DEFAULT NULL,
                IS_DEPLOYED BOOLEAN NOT NULL DEFAULT '0',
                UUID VARCHAR
        (256),
                PRIMARY KEY
        (POLICY_ID),
                UNIQUE
        (UUID)
        );

        CREATE SEQUENCE AM_THROTTLE_TIER_PERMISSIONS_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_THROTTLE_TIER_PERMISSIONS
        (
        THROTTLE_TIER_PERMISSIONS_ID INTEGER DEFAULT NEXTVAL
        ('AM_THROTTLE_TIER_PERMISSIONS_SEQ'),
        TIER VARCHAR
        (50) NULL,
        PERMISSIONS_TYPE VARCHAR
        (50) NULL,
        ROLES VARCHAR
        (512) NULL,
        ORGANIZATION VARCHAR
        (100) NULL,
        PRIMARY KEY
        (THROTTLE_TIER_PERMISSIONS_ID));

        CREATE SEQUENCE AM_BLOCK_CONDITIONS_SEQ START WITH 1 INCREMENT BY 1;
        CREATE TABLE AM_BLOCK_CONDITIONS
        (
        CONDITION_ID INTEGER DEFAULT NEXTVAL('AM_BLOCK_CONDITIONS_SEQ'),
        TYPE varchar(45) DEFAULT NULL,
        BLOCK_CONDITION varchar(512) DEFAULT NULL,
        ENABLED varchar(45) DEFAULT NULL,
        ORGANIZATION varchar(45) DEFAULT NULL,
        UUID VARCHAR(256),
        PRIMARY KEY (CONDITION_ID),
        UNIQUE (UUID)
        );

        DROP TABLE IF EXISTS AM_CERTIFICATE_METADATA;
        CREATE TABLE AM_CERTIFICATE_METADATA
        (
        TENANT_ID INTEGER NOT NULL,
        ALIAS VARCHAR(255) NOT NULL,
        END_POINT VARCHAR(255) NOT NULL,
        CERTIFICATE BYTEA DEFAULT NULL,
        CONSTRAINT PK_ALIAS PRIMARY KEY (ALIAS)
        );

        DROP TABLE IF EXISTS AM_API_CLIENT_CERTIFICATE;
        CREATE TABLE AM_API_CLIENT_CERTIFICATE
        (
        TENANT_ID INTEGER NOT NULL,
        ALIAS VARCHAR(45) NOT NULL,
        API_ID INTEGER NOT NULL,
        CERTIFICATE BYTEA NOT NULL,
        REMOVED BOOLEAN NOT NULL DEFAULT '0',
        TIER_NAME VARCHAR(512),
        REVISION_UUID VARCHAR(255) NOT NULL DEFAULT 'Current API',
        FOREIGN KEY (API_ID) REFERENCES AM_API (API_ID) ON DELETE CASCADE,
        PRIMARY KEY (ALIAS, TENANT_ID, REMOVED, REVISION_UUID)
        );

        DROP TABLE IF EXISTS AM_APPLICATION_GROUP_MAPPING;
        CREATE TABLE AM_APPLICATION_GROUP_MAPPING
        (
        APPLICATION_ID INTEGER NOT NULL,
        GROUP_ID VARCHAR(512) NOT NULL,
        TENANT VARCHAR(255),
        PRIMARY KEY (APPLICATION_ID,GROUP_ID,TENANT),
        FOREIGN KEY (APPLICATION_ID) REFERENCES AM_APPLICATION(APPLICATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
        );


        \
        DROP TABLE IF EXISTS AM_APPLICATION_ATTRIBUTES;
        CREATE TABLE
        IF NOT EXISTS AM_APPLICATION_ATTRIBUTES
        (
        APPLICATION_ID INTEGER NOT NULL,
        NAME VARCHAR
        (255) NOT NULL,
        APP_ATTRIBUTE VARCHAR
        (1024) NOT NULL,
        ORGANIZATION VARCHAR
        (100) NOT NULL,
        PRIMARY KEY
        (APPLICATION_ID,NAME),
        FOREIGN KEY
        (APPLICATION_ID) REFERENCES AM_APPLICATION
        (APPLICATION_ID) ON
        DELETE CASCADE ON
        UPDATE CASCADE
        );

        DROP TABLE IF EXISTS AM_SYSTEM_APPS;
        CREATE SEQUENCE AM_API_SYSTEM_APPS_SEQUENCE START WITH 1 INCREMENT BY 1;
        CREATE TABLE
        IF NOT EXISTS AM_SYSTEM_APPS
        (
        ID INTEGER NOT NULL DEFAULT NEXTVAL
        ('AM_API_SYSTEM_APPS_SEQUENCE'),
        NAME VARCHAR
        (50) NOT NULL,
        CONSUMER_KEY VARCHAR
        (512) NOT NULL,
        CONSUMER_SECRET VARCHAR
        (512) NOT NULL,
        TENANT_DOMAIN VARCHAR
        (255) DEFAULT 'carbon.super',
        CREATED_TIME TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        UNIQUE
        (CONSUMER_KEY),
        PRIMARY KEY
        (ID)
        );

        -- BotDATA Email table--

        DROP TABLE IF EXISTS AM_NOTIFICATION_SUBSCRIBER;
        CREATE TABLE
        IF NOT EXISTS AM_NOTIFICATION_SUBSCRIBER
        (
        UUID VARCHAR
        (255),
        CATEGORY VARCHAR
        (255),
        NOTIFICATION_METHOD VARCHAR
        (255),
        SUBSCRIBER_ADDRESS VARCHAR
        (255) NOT NULL,
        PRIMARY KEY
        (UUID, SUBSCRIBER_ADDRESS)
        ) ;

        DROP TABLE IF EXISTS AM_REVOKED_JWT;
        CREATE TABLE
        IF NOT EXISTS AM_REVOKED_JWT
        (
        UUID VARCHAR
        (255) NOT NULL,
        SIGNATURE VARCHAR
        (2048) NOT NULL,
        EXPIRY_TIMESTAMP BIGINT NOT NULL,
        TENANT_ID INTEGER DEFAULT -1,
        TOKEN_TYPE VARCHAR
        (15) DEFAULT 'DEFAULT',
        TIME_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY
        (UUID)
        );

        DROP TABLE IF EXISTS AM_API_CATEGORIES;
        CREATE TABLE
        IF NOT EXISTS AM_API_CATEGORIES
        (
        UUID VARCHAR
        (50),
        NAME VARCHAR
        (255),
        DESCRIPTION VARCHAR
        (1024),
        ORGANIZATION VARCHAR
        (100),
        UNIQUE
        (NAME,ORGANIZATION),
        PRIMARY KEY
        (UUID)
        );

        DROP TABLE IF EXISTS AM_USER;
        CREATE TABLE
        IF NOT EXISTS AM_USER
        (
        USER_ID VARCHAR
        (255) NOT NULL,
        USER_NAME VARCHAR
        (255) NOT NULL,
        PRIMARY KEY
        (USER_ID)
        );
        DROP TABLE IF EXISTS AM_KEY_MANAGER;
        CREATE TABLE
        IF NOT EXISTS AM_KEY_MANAGER
        (
        UUID VARCHAR
        (50) NOT NULL,
        NAME VARCHAR
        (100) NULL,
        DISPLAY_NAME VARCHAR
        (100) NULL,
        DESCRIPTION VARCHAR
        (256) NULL,
        TYPE VARCHAR
        (45) NULL,
        CONFIGURATION BYTEA NULL,
        ENABLED BOOLEAN DEFAULT '1',
        ORGANIZATION VARCHAR
        (100) NULL,
        TOKEN_TYPE VARCHAR
        (45) NULL,
        EXTERNAL_REFERENCE_ID VARCHAR
        (100) NULL,
        PRIMARY KEY
        (UUID),
        UNIQUE
        (NAME,ORGANIZATION)
        );


        -- Tenant Themes Table --
        DROP TABLE IF EXISTS AM_TENANT_THEMES;
        CREATE TABLE
        IF NOT EXISTS AM_TENANT_THEMES
        (
        ORGANIZATION VARCHAR
        (100) NOT NULL,
        THEME BYTEA NOT NULL,
        PRIMARY KEY
        (ORGANIZATION)
        );

        DROP TABLE IF EXISTS AM_SCOPE;
        DROP SEQUENCE IF EXISTS AM_SCOPE_PK_SEQ;
        CREATE SEQUENCE AM_SCOPE_PK_SEQ;
        CREATE TABLE
        IF NOT EXISTS AM_SCOPE
        (
                SCOPE_ID INTEGER DEFAULT NEXTVAL
        ('AM_SCOPE_PK_SEQ'),
                NAME VARCHAR
        (255) NOT NULL,
                DISPLAY_NAME VARCHAR
        (255) NOT NULL,
                DESCRIPTION VARCHAR
        (512),
                TENANT_ID INTEGER NOT NULL DEFAULT -1,
                SCOPE_TYPE VARCHAR
        (255) NOT NULL,
                PRIMARY KEY
        (SCOPE_ID)
        );

        DROP TABLE IF EXISTS AM_SCOPE_BINDING;
        CREATE TABLE
        IF NOT EXISTS AM_SCOPE_BINDING
        (
                SCOPE_ID INTEGER NOT NULL,
                SCOPE_BINDING VARCHAR
        (255) NOT NULL,
                BINDING_TYPE VARCHAR
        (255) NOT NULL,
                FOREIGN KEY
        (SCOPE_ID) REFERENCES AM_SCOPE
        (SCOPE_ID) ON
        DELETE CASCADE
        );

        DROP TABLE IF EXISTS AM_REVISION;
        CREATE TABLE
        IF NOT EXISTS AM_REVISION
        (
                ID INTEGER NOT NULL,
                API_UUID VARCHAR
        (256) NOT NULL,
                REVISION_UUID VARCHAR
        (255) NOT NULL,
                DESCRIPTION VARCHAR
        (255),
                CREATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CREATED_BY VARCHAR
        (255),
                PRIMARY KEY
        (ID, API_UUID),
                FOREIGN KEY
        (API_UUID) REFERENCES AM_API
        (API_UUID) ON
        DELETE CASCADE,
                UNIQUE(REVISION_UUID)
        );

        DROP TABLE IF EXISTS AM_API_REVISION_METADATA;
        CREATE TABLE
        IF NOT EXISTS AM_API_REVISION_METADATA
        (
        API_UUID VARCHAR
        (64),
        REVISION_UUID VARCHAR
        (255),
        API_TIER VARCHAR
        (128),
        ARTIFACT JSONB NOT NULL,
        FOREIGN KEY
        (REVISION_UUID) REFERENCES AM_REVISION
        (REVISION_UUID) ON
        DELETE CASCADE,
        UNIQUE (API_UUID,REVISION_UUID)
        );

        DROP TABLE IF EXISTS AM_DEPLOYMENT_REVISION_MAPPING;
        CREATE TABLE
        IF NOT EXISTS AM_DEPLOYMENT_REVISION_MAPPING
        (
                NAME VARCHAR
        (255) NOT NULL,
                VHOST VARCHAR
        (255) NULL,
                REVISION_UUID VARCHAR
        (255) NOT NULL,
                DISPLAY_ON_DEVPORTAL BOOLEAN DEFAULT '0',
                DEPLOYED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY
        (NAME, REVISION_UUID),
                FOREIGN KEY
        (REVISION_UUID) REFERENCES AM_REVISION
        (REVISION_UUID) ON
        UPDATE CASCADE ON
        DELETE CASCADE
        );

        DROP TABLE IF EXISTS AM_DEPLOYED_REVISION;
        CREATE TABLE
        IF NOT EXISTS AM_DEPLOYED_REVISION
        (
                NAME VARCHAR
        (255) NOT NULL,
                VHOST VARCHAR
        (255) NULL,
                REVISION_UUID VARCHAR
        (255) NOT NULL,
                DEPLOYED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY
        (NAME, REVISION_UUID),
                FOREIGN KEY
        (REVISION_UUID) REFERENCES AM_REVISION
        (REVISION_UUID) ON
        UPDATE CASCADE ON
        DELETE CASCADE
        );

        -- Gateway Environments Table --
        DROP TABLE IF EXISTS AM_GATEWAY_ENVIRONMENT;
        DROP SEQUENCE IF EXISTS AM_GATEWAY_ENVIRONMENT_PK_SEQ;
        CREATE SEQUENCE AM_GATEWAY_ENVIRONMENT_PK_SEQ;
        CREATE TABLE
        IF NOT EXISTS AM_GATEWAY_ENVIRONMENT
        (
                ID INTEGER DEFAULT NEXTVAL
        ('AM_GATEWAY_ENVIRONMENT_PK_SEQ'),
                UUID VARCHAR
        (45) NOT NULL,
                NAME VARCHAR
        (255) NOT NULL,
                DISPLAY_NAME VARCHAR
        (255) NULL,
                DESCRIPTION VARCHAR
        (1023) NULL,
                PROVIDER VARCHAR
        (255) NOT NULL,
                ORGANIZATION  VARCHAR
        (255) NOT NULL,
                UNIQUE
        (NAME, ORGANIZATION),
                UNIQUE
        (UUID),
                PRIMARY KEY
        (ID)
        );

        -- Virtual Hosts Table --
        DROP TABLE IF EXISTS AM_GW_VHOST;
        CREATE TABLE
        IF NOT EXISTS AM_GW_VHOST
        (
                GATEWAY_ENV_ID INTEGER NOT NULL,
                HOST VARCHAR
        (255) NOT NULL,
                HTTP_CONTEXT VARCHAR
        (255) NULL,
                HTTP_PORT VARCHAR
        (5) NOT NULL,
                HTTPS_PORT VARCHAR
        (5) NOT NULL,
                WS_PORT VARCHAR
        (5) NOT NULL,
                WSS_PORT VARCHAR
        (5) NOT NULL,
                FOREIGN KEY
        (GATEWAY_ENV_ID) REFERENCES AM_GATEWAY_ENVIRONMENT
        (ID) ON
        UPDATE CASCADE ON
        DELETE CASCADE,
                PRIMARY KEY (GATEWAY_ENV_ID, HOST)
        );

        -- Service Catalog --
        DROP TABLE IF EXISTS AM_SERVICE_CATALOG;
        CREATE TABLE
        IF NOT EXISTS AM_SERVICE_CATALOG
        (
                UUID VARCHAR
        (36) NOT NULL,
                SERVICE_KEY VARCHAR
        (512) NOT NULL,
                MD5 VARCHAR
        (100) NOT NULL,
                SERVICE_NAME VARCHAR
        (255) NOT NULL,
                SERVICE_VERSION VARCHAR
        (30) NOT NULL,
                TENANT_ID INTEGER NOT NULL,
                SERVICE_URL VARCHAR
        (2048) NOT NULL,
                DEFINITION_TYPE VARCHAR
        (20),
                DEFINITION_URL VARCHAR
        (2048),
                DESCRIPTION VARCHAR
        (1024),
                SECURITY_TYPE VARCHAR
        (50),
                MUTUAL_SSL_ENABLED BOOLEAN DEFAULT '0',
                CREATED_TIME TIMESTAMP NULL,
                LAST_UPDATED_TIME TIMESTAMP NULL,
                CREATED_BY VARCHAR
        (255),
                UPDATED_BY VARCHAR
        (255),
                SERVICE_DEFINITION BYTEA NOT NULL,
                PRIMARY KEY
        (UUID),
                UNIQUE
        (SERVICE_NAME, SERVICE_VERSION, TENANT_ID),
                UNIQUE
        (SERVICE_KEY, TENANT_ID)
        );

        -- Webhooks --
        DROP SEQUENCE IF EXISTS AM_WEBHOOKS_PK_SEQ;
        CREATE SEQUENCE AM_WEBHOOKS_PK_SEQ;
        DROP TABLE IF EXISTS AM_WEBHOOKS_SUBSCRIPTION;
        CREATE TABLE
        IF NOT EXISTS AM_WEBHOOKS_SUBSCRIPTION
        (
                WH_SUBSCRIPTION_ID INTEGER DEFAULT NEXTVAL
        ('AM_WEBHOOKS_PK_SEQ'),
                API_UUID VARCHAR
        (255) NOT NULL,
                APPLICATION_ID VARCHAR
        (20) NOT NULL,
                TENANT_DOMAIN VARCHAR
        (255) NOT NULL,
                HUB_CALLBACK_URL VARCHAR
        (1024) NOT NULL,
                HUB_TOPIC VARCHAR
        (255) NOT NULL,
                HUB_SECRET VARCHAR
        (2048),
                HUB_LEASE_SECONDS INTEGER,
                UPDATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                EXPIRY_AT BIGINT,
                DELIVERED_AT TIMESTAMP NULL,
                DELIVERY_STATE INTEGER NOT NULL DEFAULT 0,
                PRIMARY KEY
        (WH_SUBSCRIPTION_ID)
        );

        DROP TABLE IF EXISTS AM_WEBHOOKS_UNSUBSCRIPTION;
        CREATE TABLE
        IF NOT EXISTS AM_WEBHOOKS_UNSUBSCRIPTION
        (
                API_UUID VARCHAR
        (255) NOT NULL,
                APPLICATION_ID VARCHAR
        (20) NOT NULL,
                TENANT_DOMAIN VARCHAR
        (255) NOT NULL,
                HUB_CALLBACK_URL VARCHAR
        (1024) NOT NULL,
                HUB_TOPIC VARCHAR
        (255) NOT NULL,
                HUB_SECRET VARCHAR
        (2048),
                HUB_LEASE_SECONDS INTEGER,
                ADDED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        DROP TABLE IF EXISTS AM_API_SERVICE_MAPPING;
        CREATE TABLE AM_API_SERVICE_MAPPING
        (
        API_ID INTEGER NOT NULL,
        SERVICE_KEY VARCHAR(256) NOT NULL,
        MD5 VARCHAR(100),
        TENANT_ID INTEGER NOT NULL,
        PRIMARY KEY (API_ID, SERVICE_KEY),
        FOREIGN KEY (API_ID) REFERENCES AM_API(API_ID) ON DELETE CASCADE
        );

        CREATE TABLE
        IF NOT EXISTS AM_API_ENVIRONMENT_KEYS
        (
        UUID            VARCHAR
        (45)  NOT NULL,
        ENVIRONMENT_ID  VARCHAR
        (45)  NOT NULL,
        API_UUID        VARCHAR
        (256) NOT NULL,
        PROPERTY_CONFIG bytea DEFAULT NULL,
        UNIQUE
        (ENVIRONMENT_ID, API_UUID),
        FOREIGN KEY
        (API_UUID) REFERENCES AM_API
        (API_UUID) ON
        DELETE CASCADE,
        PRIMARY KEY (UUID)
        );

        DROP TABLE IF EXISTS AM_OPERATION_POLICY;
        CREATE TABLE
        IF NOT EXISTS AM_OPERATION_POLICY
        (
        POLICY_UUID VARCHAR
        (45) NOT NULL,
        POLICY_NAME VARCHAR
        (300) NOT NULL,
        POLICY_VERSION VARCHAR
        (45) DEFAULT 'v1',
        DISPLAY_NAME VARCHAR
        (300) NOT NULL,
        POLICY_DESCRIPTION VARCHAR
        (1024),
        APPLICABLE_FLOWS VARCHAR
        (45) NOT NULL,
        GATEWAY_TYPES VARCHAR
        (45) NOT NULL,
        API_TYPES VARCHAR
        (45) NOT NULL,
        POLICY_PARAMETERS bytea,
        ORGANIZATION VARCHAR
        (100),
        POLICY_CATEGORY VARCHAR
        (45) NOT NULL,
        POLICY_MD5 VARCHAR
        (45) NOT NULL,
        PRIMARY KEY
        (POLICY_UUID)
        );

        DROP TABLE IF EXISTS AM_OPERATION_POLICY_DEFINITION;
        CREATE TABLE
        IF NOT EXISTS AM_OPERATION_POLICY_DEFINITION
        (
        DEFINITION_ID SERIAL,
        POLICY_UUID VARCHAR
        (45) NOT NULL,
        POLICY_DEFINITION bytea NOT NULL,
        GATEWAY_TYPE VARCHAR
        (20) NOT NULL,
        DEFINITION_MD5 VARCHAR
        (45) NOT NULL,
        UNIQUE
        (POLICY_UUID, GATEWAY_TYPE),
        FOREIGN KEY
        (POLICY_UUID) REFERENCES AM_OPERATION_POLICY
        (POLICY_UUID) ON
        DELETE CASCADE,
        PRIMARY KEY(DEFINITION_ID)
        );

        DROP TABLE IF EXISTS AM_COMMON_OPERATION_POLICY;
        CREATE TABLE
        IF NOT EXISTS AM_COMMON_OPERATION_POLICY
        (
        COMMON_POLICY_ID SERIAL,
        POLICY_UUID VARCHAR
        (45) NOT NULL,
        FOREIGN KEY
        (POLICY_UUID) REFERENCES AM_OPERATION_POLICY
        (POLICY_UUID) ON
        DELETE CASCADE,
        PRIMARY KEY(COMMON_POLICY_ID)
        );

        DROP TABLE IF EXISTS AM_API_OPERATION_POLICY;
        CREATE TABLE
        IF NOT EXISTS AM_API_OPERATION_POLICY
        (
        API_SPECIFIC_POLICY_ID SERIAL,
        POLICY_UUID VARCHAR
        (45) NOT NULL,
        API_UUID VARCHAR
        (45) NOT NULL,
        REVISION_UUID VARCHAR
        (45),
        CLONED_POLICY_UUID VARCHAR
        (45),
        FOREIGN KEY
        (POLICY_UUID) REFERENCES AM_OPERATION_POLICY
        (POLICY_UUID) ON
        DELETE CASCADE,
        PRIMARY KEY(API_SPECIFIC_POLICY_ID)
        );

        DROP TABLE IF EXISTS AM_API_OPERATION_POLICY_MAPPING;
        CREATE TABLE
        IF NOT EXISTS AM_API_OPERATION_POLICY_MAPPING
        (
        OPERATION_POLICY_MAPPING_ID SERIAL,
        URL_MAPPING_ID INTEGER NOT NULL,
        POLICY_UUID VARCHAR
        (45) NOT NULL,
        POLICY_ORDER INTEGER NOT NULL,
        DIRECTION VARCHAR
        (10) NOT NULL,
        PARAMETERS VARCHAR
        (1024) NOT NULL,
        FOREIGN KEY
        (URL_MAPPING_ID) REFERENCES AM_API_URL_MAPPING
        (URL_MAPPING_ID) ON
        DELETE CASCADE,
        FOREIGN KEY (POLICY_UUID)
        REFERENCES AM_OPERATION_POLICY
        (POLICY_UUID) ON
        DELETE CASCADE,
        PRIMARY KEY(OPERATION_POLICY_MAPPING_ID)
        );

        DROP TABLE IF EXISTS AM_SYSTEM_CONFIGS;
        CREATE TABLE
        IF NOT EXISTS AM_SYSTEM_CONFIGS
        (
        ORGANIZATION     VARCHAR
        (100)            NOT NULL,
        CONFIG_TYPE      VARCHAR
        (100)            NOT NULL,
        CONFIGURATION    bytea                   NOT NULL,
        PRIMARY KEY
        (ORGANIZATION,CONFIG_TYPE)
        );

        -- End of API-MGT Tables --

        -- Performance indexes start--

        create index IDX_AAI_CTX on AM_API (CONTEXT);
        create index IDX_AAI_ORG on AM_API (ORGANIZATION);
        create index IDX_AAKM_CK on AM_APPLICATION_KEY_MAPPING (CONSUMER_KEY);
        create index IDX_AAUM_AI on AM_API_URL_MAPPING (API_ID);
        create index IDX_AAPROD_AI on AM_API_PRODUCT_MAPPING (API_ID);
        create index IDX_AAUM_TT on AM_API_URL_MAPPING (THROTTLING_TIER);
        create index IDX_AATP_DQT on AM_API_THROTTLE_POLICY (DEFAULT_QUOTA_TYPE);
        create index IDX_ACG_QT on AM_CONDITION_GROUP (QUOTA_TYPE);
        create index IDX_APS_QT on AM_POLICY_SUBSCRIPTION (QUOTA_TYPE);
        create index IDX_AS_AITIAI on AM_SUBSCRIPTION (API_ID,TIER_ID,APPLICATION_ID);
        create index IDX_APA_QT on AM_POLICY_APPLICATION (QUOTA_TYPE);
        create index IDX_AA_AT_CB on AM_APPLICATION (APPLICATION_TIER,CREATED_BY);

        -- Performance indexes end--
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO wso2carbon;
        GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO wso2carbon;
        GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO wso2carbon;

        -- Insert Demo APK data ---
        INSERT INTO public.am_subscriber(user_id, organization, email_address, date_subscribed )
                VALUES ( 'apkuser', 'carbon.super', 'apk@wso2.com', now());
        -- End Insert Demo APK data        
        commit;
